tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replacement=FALSE)
sample(1:20, 10)
summary(LETTERS)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7)) -> flips
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
rbinom(1, size=100, prob = 0.7)
rbinom(1, size=100, prob = 0.7) -> flips2
rbinom(100, size =1, prob = 0.7) -> flips2
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5, 10)
replicate(100, rpois(5,10))
replicate(100, rpois(5,10)) -> my_pois
my_pois
colMeans(my_pois) -> cm
hist(cm)
d1 <- Sys.Date()
class(D1)
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
as.POSIXlt(Sys.time()) -> t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t2, "%B %d %Y %H:%M")
strptime(t3, "%B %d %Y %H:%M")
strptime(t3, "%B %d %Y %H:%M") -> t4
strptime(t3, "%B %d, %Y %H:%M") -> t4
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
library(mtcars)
data(mtcars)
?boxplot()
?boxplot
bloxplot(mpg ~ cyl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcar$mpg)
hist(mtcars$mpg)
install_from_swirl("Getting and Cleaning Data")
library(ggplot)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
?ggplot2
data(diamonrs)
data(diamonds)
ggplot(diamonds, aes(carat, price, col = color, shape = cut)) +
geom_point()
swirl()
library(swirl)
swirl
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
tidyUCI()
exit()
quit()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today() -> this_day
this_day
year(this_day)
wday(this_day
)
wday(this_day, label = TRUE)
now()
now() -> this_moment
this_moment
hour(this_moment)
ymd("1989-05-17") -> my_date
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
rmd("192012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 24, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 12, minutes = 57) -> this_moment
this_moment
?now
now(tzone = "America/New_York")
now("America/New_York")
now("America/New_York")
now("America/New_York") -> nyc
nyc
nyc + days(2)
nyc + days(2) -> depart
depart
update(depart, hours = 17, minutes = 34) -> depart
depart
depart + hours(15) + minutes(50) -> arrive
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong") -> arrive
arrive
mdy("June 17, 2008", tz = "Singapore") -> last_time
last_time
?new_interval
new_interval(last_time, arrive) -> how_long
as.period(how_long)
stopwatch()
xfig()
xfig()
jpeg()
?xfig
?par
?quartz
?postscript
?dev.copy2pdf
?postscript
?jpeg
?tiff
?svg
?windows
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
library(nlme)
library(lattice)
xplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data("airquality")
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?trellis.pqplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("Dropbox/ReproducibleResearch")
setwd("RepData_PeerAssessment1")
read.csv("activity.csv", stringsAsFactors = FALSE, header = TRUE)
!! -> test
read.csv("activity.csv", stringsAsFactors = FALSE, header = TRUE) -> test
head(test)
class(test[2,3])
class(2,1)
class(test[2,2])
test[2,2]
as.Date(test[2,2], format="%Y-%m-%d")
as.Date(test[2,2], format="%Y-%m-%d") -> testdate
class(testdate)
names(test)
test[, 2] <- as.Date(test[,2], format="%Y-%m-%d")
test[, 2]
class(test[4, 2])
group_by(test, date)
library(dplyr)
group_by(test, date)
table(test$steps)
count(test$steps)
?count
test >%> group_by(date) %>% count()
group_by(test, date) ^%> count()
?wday
wday(test$date)
wday(test$date, label = TRUE)
table(test$steps)
table(tests$date)
table(test$date)
group_by(test, date) %>% sum()
aggregate(test$steps, by=list(Category=test$date), FUN=sum)
hist(forhist)
aggregate(test$steps, by=list(Category=test$date), FUN=sum) -> forhist
hist(forhist)
class(forhist[1,2])
hist(forhist$x)
names(test)
aggregate(test$steps, by=list(Category=test$interval), FUN=mean)
aggregate(test$steps, by=list(Category=test$interval), FUN=mean, na.rm = TRUE)
aggregate(test$steps, by=list(Category=test$interval), FUN=mean, na.rm = TRUE) -> fortimeseries
plot(fortimeseries)
ggplot(fortimeseries, aes(x=Interval, y=x)) + geom_line() -> p
aggregate(test$steps, by=list(interval=test$interval), FUN=mean, na.rm = TRUE) -> fortimeseries
ggplot(fortimeseries, aes(x=Interval, y=x)) + geom_line() -> p
library(ggplot2)
ggplot(fortimeseries, aes(x=Interval, y=x)) + geom_line() -> p
print(p)
names(fortimeseries)
ggplot(fortimeseries, aes(x=interval, y=x)) + geom_line() -> p
print(p)
max(fortimeseries$x)
fortimeseries[fortimeseries$x == 206.1698, ]
fortimeseries[fortimeseries$x == 206.1698 ]
names(fortimeseries)
max(fortimeseries$x)
which(max(fortimeseries$x))
?which
which.max(fortimeseries$x)
which.max(fortimeseries$x) -> rownum
fortimeseries[rownum, 1]
fortimeseries[835, 1]
fortimeseries[835, 2]
fortimeseries[fortimeseries$interval == 835, ]
count(is.na(test))
count(is.na(test$x))
is.na(test)
sum(is.na(test$steps))
sum(is.na(test))
is.na(test)
test[is.na(test), 1]
test[is.na(test), 2]
test[is.na(test), 3]
test[is.na(test), 2]
test[is.na(test), ]
naset[, 2]
test[is.na(test), ] -> naset
activityset[is.na(activityset), ]$1
activityset[is.na(activityset), ]$steps
test -> activityset
activityset[is.na(activityset), ]$steps
fortimeseries[fortimeseries$interval == activityset[is.na(activityset), ]$interval]
activityset[is.na(activityset), ]$interval
activityset[is.na(activityset), ]$interval -> intervallist
fortimeseries[intervallist, ]
fortimeseries[fortimeseries$interval == intervallist, ]
which(fortimeseries$interval == intervallist)
fortimeseries[which(fortimeseries$interval == intervallist), c(1)]
fortimeseries[which(fortimeseries$interval == intervallist), ]$x
fortimeseries$x
fortimeseries
intervallist
which(fortimeseries$interval == 2355)
fortimeseries[which(fortimeseries$interval == 2355)]$x
fortimeseries[which(fortimeseries$interval == 2355), ]$x
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
testfun(fortimeseries, "2355")
lapply(intervallist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(intervallist, testfun, fortimeseries)
testlist <- c(5, 15)
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(testlist, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
lapply(activityset, testfun, fortimeseries)
apply(activityset, 1, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
apply(activityset, 1, testfun, fortimeseries)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
activityset[is.na(activityset), ] -> newtest
apply(newtest, 1, simplefun)
names(biglist)
names(newtest)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
apply(newtest, 1, simplefun)
class(newtest)
apply(newtest, 1, simplefun)
source('~/Dropbox/ReproducibleResearch/RepData_PeerAssessment1/scratch.R')
apply(newtest, 1, simplefun)
apply(newtest, c(1,2), simplefun)
merge(activityset[is.na(activityset), ], fortimeseries, by=interval)
activityset[is.na(activityset), ] -> newtest
names(newtest)
View(newtest)
View(fortimeseries)
?merge
merge(newtest, fortimeseries, by="interval")
merge(newtest, fortimeseries, by="interval") -> withavg
names(withavg)
withavg[, c(1,3,4)]
colnames(activityset)
activityset[!is.na(activityset), ]
activityset[!is.na(activityset), ] -> nonaset
nrow(nonaset)
nrow(activityset)
activityset[!(is.na(activityset)), ]
complete.cases(activityset)
activityset[complete.cases(activityset), ] -> nonaset
nrow(nonaset)
nrow(naset)
rbind(nonaset, withavg)
colnames(nonaset)
colnames(withavg)
merge(naset, fortimeseries, by="interval") -> withavg
withavg[, c(1,3,4)]  -> withavg
colnames(withavg) <- c("interval", "date", "steps")
colnames(withavg)
rbind(nonaset, withavg)
rbind(nonaset, withavg) -> test
View(test)
naset[57, ]
View(fortimeseries)
hist(?weekdays)
?weekdats
?weekdays
weekdays(activityset$date) -> activityset$weekday
View(activityset)
factor(activityset$weekday)
factor(activityset$weekday) -> activityset$weekday
activityset$weekday
levels(activityset$weekday) <- c("weekday", "weekday", "weekend", "weekend", "weekday", "weekday", "weekday")
activityset$weekday
aggregate(activityset$steps, by=list(weekday=activityset$weekday), FUN=mean, na.rm = TRUE) -> fortimeseries2
ggplot(fortimeseries2, aes(x=weekday, y=x)) + geom_line() -> p
print(p)
aggregate(activityset$steps, by=list(interval=activityset$interval), FUN=mean, na.rm = TRUE) -> fortimeseries2
ggplot(fortimeseries2, aes(x=interval, y=x, colour=weekday)) + geom_line() -> p
print(p)
aggregate(activityset$steps, by=list(interval=activityset$interval), FUN=mean, na.rm = TRUE) -> fortimeseries2
ggplot(fortimeseries2, aes(x=interval, y=x, colour=weekdays)) + geom_line() -> p
print(p)
weekdays(activityset$date) -> activityset$wd
factor(activityset$wd) -> activityset$wd
levels(activityset$wd) <- c("weekday", "weekday", "weekend", "weekend", "weekday", "weekday", "weekday")
aggregate(activityset$steps, by=list(interval=activityset$interval), FUN=mean, na.rm = TRUE) -> fortimeseries2
ggplot(fortimeseries2, aes(x=interval, y=x, color=wd)) + geom_line() -> p
print(p)
names(activityset)
head(activityset)
ggplot(fortimeseries2, aes(x=interval, y=x, colour=wd)) + geom_line() -> p
print(p)
ggplot(fortimeseries2, aes(x=interval, y=x, colour=weedggplot(fortimeseries2, aes(x=interval, y=x)) + geom_line(aes(colour=wd) -> p
print(p))) + geom_line() -> p
ggplot(fortimeseries2, aes(x=interval, y=x)) + geom_line(aes(colour=wd) -> p
print(p)
ggplot(fortimeseries2, aes(x=interval, y=x)) + geom_line(aes(colour=wd) -> p
print(p)
ggplot(fortimeseries2, aes(x=interval, y=x)) + geom_line(aes(colour=wd)) -> p
print(p)
names(fortimeseries2)
ggplot(activityset, aes(x=interval, y=x)) + geom_line(stat = mean, aes(colour=wd) -> p
print(p)
ggplot(activityset, aes(x=interval, y=x)) + geom_line(stat = mean, aes(colour=wd)) -> p
print(p)
ggplot(activityset, aes(x=interval, y=x)) + stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange") +
stat_summary(fun.y = mean,
geom = "line") +
geom_line(stat = mean, aes(colour=wd)) -> p
print(p)
ggplot(activityset, aes(x=interval, y=x)) + stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange") +
stat_summary(fun.y = mean,
geom = "line") -> p
print(p)
ggplot(activityset, aes(x=interval, y=x, colour=wd, group=wd)) + stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange") +
stat_summary(fun.y = mean,
geom = "line") -> p
print(p)
names(activityset)
ggplot(activityset, aes(x=interval, y=steps, colour=wd, group=wd)) + stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange") +
stat_summary(fun.y = mean,
geom = "line") -> p
print(p)
aggregate(activityset$steps ~ wd, by=list(interval=activityset$interval), FUN=mean, na.rm = TRUE)
names(activityset)
aggregate(activityset$steps ~ activityset$wd, by=list(interval=activityset$interval), FUN=mean, na.rm = TRUE)
aggregate(activityset$steps + activityset$wd, by=list(interval=activityset$interval), FUN=mean, na.rm = TRUE)
activityset[activityset$wd == "weekday", ] -> myweekdays
activityset[activityset$wd == "weekend", ] -> myweekends
aggregate(myweekdays$steps, by=list(interval=myweekdays$interval), FUN=mean, na.rm = TRUE) -> fortimeseries1
aggregate(myweekends$steps, by=list(interval=myweekends$interval), FUN=mean, na.rm = TRUE) -> fortimeseries1
View(myweekdays)
View(myweekends)
View(myweekdays)
aggregate(myweekdays$steps, by=list(interval=myweekdays$interval), FUN=mean, na.rm = TRUE) -> fortimeseries1
aggregate(myweekends$steps, by=list(interval=myweekends$interval), FUN=mean, na.rm = TRUE) -> fortimeseries2
fortimeseries1$wd <- "weekday"
fortimeseries2$wd <- "weekend"
rbind(fortimeseries1, fortimeseries2) -> fortimeseries3
ggplot(fortimeseries3, aes(x=interval, y=steps, colour=wd, group=wd)) + geom_line() -> p
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x, colour=wd, group=wd)) + geom_line() -> p
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x, colour=wd, group=wd)) + geom_line() +
facet_grid(wd . ~) -> p
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x, colour=wd, group=wd)) + geom_line() -> p
p + facet_grid(wd . ~)
print(p)
rbind(fortimeseries1, fortimeseries2) -> fortimeseries3
ggplot(fortimeseries3, aes(x=interval, y=x, colour=wd, group=wd)) + geom_line() -> p
p + facet_grid(~ . wd)
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x, colour=wd, group=wd)) + geom_line() + facet_grid(wd . ~) -> p
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x)) + geom_line() + facet_grid(wd . ~) -> p
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x)) + geom_line() + facet_grid(~ . x) -> p
print(p)
ggplot(fortimeseries3, aes(x=interval, y=x)) + geom_line() -> p
print(p)
p + facet_grid(~ . wd)
p <-  p + facet_grid(~ . wd)
p <-  p + facet_grid(. ~ wd)
print(p)
p <-  p + facet_grid(wd ~ .)
print(p)
rbind(fortimeseries1, fortimeseries2) -> fortimeseries3
ggplot(fortimeseries3, aes(x=interval, y=x, colour=wd, group=wd)) + geom_line() -> p
p <-  p + facet_grid(wd ~ .)
print(p)
